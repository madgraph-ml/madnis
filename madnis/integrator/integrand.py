from typing import Callable

import torch

from .channel_grouping import ChannelGrouping


class Integrand:
    """
    Class that wraps an integrand function and meta-data necessary to use advanced MadNIS
    features like learnable multi-channel weights, grouped channels and channel weight priors.
    """

    def __init__(
        self,
        function: Callable,
        input_dim: int,
        channel_count: int | None = None,
        remapped_dim: int | None = None,
        has_channel_weight_prior: bool = False,
        channel_grouping: ChannelGrouping | None = None,
    ):
        """
        Args:
            function: integrand function.
                The signature depends on the other arguments:

                  - single-channel integration, ``channel_count=None``: ``x -> f``
                  - basic multi-channel integration, ``remapped_dim=None``,
                    ``has_channel_weight_prior=False``: ``(x, c) -> f``
                  - with channel weights, ``remapped_dim=None``, ``has_channel_weight_prior=True``:
                    ``(x, c) -> (f, alpha)`` (no trainable channel weights possible)
                  - with channel-dependent mapping, ``remapped_dim: int``,
                    ``has_channel_weight_prior=False``: ``(x, c) -> (f, y)``
                  - all features, ``remapped_dim: int``, ``has_channel_weight_prior=True``:
                    ``(x, c) -> (f, y, alpha)``

                with the following tensors:

                  - ``x`` is a point generated by the importance sampling, shape (n, input_dim),
                  - ``c`` is the channel index, shape (n, ),
                  - ``f`` is the integrand value, shape (n, ),
                  - ``y`` is the point after applying a channel-dependent mapping, shape
                    (n, remapped_dim)
                  - ``alpha`` is the prior channel weight, shape (n, channel_count).
            input_dim: dimension of the integration space.
            channel_count: None in the single-channel case, specifies the number of channels
                otherwise.
            remapped_dim: If different from None, it gives the dimension of a remapped space,
                with a channel-dependent mapping computed as part of the integrand function.
            has_channel_weight_prior: If True, the integrand returns channel weights
            channel_grouping: ChannelGrouping object or None if all channels are independent
        """
        self.input_dim = input_dim
        self.remapped_dim = remapped_dim
        self.channel_count = channel_count
        self.has_channel_weight_prior = has_channel_weight_prior
        self.channel_grouping = channel_grouping

        if channel_count is None:
            self.function = lambda x, channels: (function(x), None, None)
        elif remapped_dim is None:
            if has_channel_weight_prior:
                self.function = lambda x, channels: (function(x, channels), None, None)
            else:

                def func(x, channels):
                    x, prior = function(x, channels)
                    return x, None, prior

                self.function = func
        elif has_channel_weight_prior:
            self.function = function
        else:

            def func(x, channels):
                x, y = function(x, channels)
                return x, y, None

            self.function = func

    def __call__(
        self, x: torch.Tensor, channels: torch.Tensor | None
    ) -> tuple[torch.Tensor, torch.Tensor | None, torch.Tensor | None]:
        return self.function(x, channels)
